/**
 * 登录管理
 */
class LoginManager
{
	private static TokenLoginTryTimes: number = 3;//token登录错误重试3次
	private static TokenErrorCode: number = 406;//token登录错误码
	//
	private static clientkey: string;
	private static _tokenLoginCount: number = 0;//token重试次数
	//
	private static _ip: string;
	private static _address: string;
	private static _port: number;
	//
	private static _socket: LoginSocket;
	private static _clientKey: string;
	private static _hexsecret: string;
	private static _password: string;
	private static _channel: string;//登录渠道，安装包渠道+"_"+登录类型
	private static _isLogin: number;
	private static _tokenCode: string;

	private static _loginMode: LoginMode;
	/// <summary>
	/// 登录模式
	/// </summary>
	public static get loginMode()
	{

		return LoginManager._loginMode;
	}
	private static _loginInfo: LoginInfo;
	/// <summary>
	/// 登录信息
	/// </summary>
	public static get loginInfo(): LoginInfo
	{
		return LoginManager._loginInfo;
	}
	private static _account: string;
	/// <summary>
	/// 游戏帐号名 或 渠道帐号id（对于游戏来说，渠道的帐号id就是游戏帐号名）
	/// </summary>
	public static get account()
	{

		return LoginManager._account;
	}
	private static _channelToken: string;
	/// <summary>
	/// 渠道返回的token
	/// </summary>
	public static get channelToken()
	{

		return LoginManager._channelToken;
	}
	/// <summary>
	/// 设置平台登录地址（关系到登录服务器）(版本检查完成后才能正确设置)
	/// </summary>
	public static SetAddress(loginType: string)
	{
		//内网在project.xml里取ip和port
		if (loginType == ChannelLoginType.IntranetAccount)
		{
			LoginManager._address = ProjectDefined.GetInstance().getValue(ProjectDefined.intranetIp);
			LoginManager._port = ProjectDefined.GetInstance().getValue(ProjectDefined.intranetPort);
		}
		else
		{
			LoginManager._address = VersionManager.loginAddress;
			LoginManager._port = VersionManager.loginPort;
		}
	}
	/// <summary>
	/// 销毁
	/// </summary>
	public static Dispose()
	{
		LoginManager.OnComplete.clear();
		if (this._socket != null)
		{
			LoginManager.RemoveAllListener();
			LoginManager._socket.dispose();
			LoginManager._socket = null;
		}
	}
	/// <summary>
	/// 关闭
	/// </summary>
	public static Close()
	{
		if (LoginManager._socket != null)
		{
			LoginManager.RemoveAllListener();
			LoginManager._socket.close();
		}
	}
	private static RemoveAllListener()
	{
		UIManager.removeEventListener(UIModuleName.LoadingPanel, UIModuleEvent.OnTimeout, LoginManager.OnLoadingTimeout);
		LoginManager._socket.RemoveMessageListener(LoginManager.OnLoginMessage);
		LoginManager._socket.RemoveCommandListener(Command.Login_login, LoginManager.OnLogin);
		LoginManager._socket.RemoveCommandListener(Command.Login_exchange, LoginManager.OnExchange);
		LoginManager._socket.RemoveCommandListener(Command.Login_auth, LoginManager.OnAuth);
		LoginManager._socket.RemoveResultListener(LoginManager.OnResult);
	}
	/// <summary>
	/// 游客登录
	/// </summary>
	/// <param name="channel"></param>
	public static GuestLogin(channel: string)
	{
		LoginManager._loginMode = LoginMode.Guest;
		LoginManager._isLogin = 1;
		LoginManager._channel = channel;
		LoginManager._account = "游客";
		LoginManager._password = StringConstant.empty;
		LoginManager.Connect(LoginManager._address, LoginManager._port);
	}
	/// <summary>
	/// 游戏账号登录
	/// </summary>
	/// <param name="channel"></param>
	/// <param name="account"></param>
	/// <param name="pwd"></param>
	public static AccountLogin(channel: string, account: string, pwd: string)
	{
		LoginManager._loginMode = LoginMode.Account;
		LoginManager._isLogin = 1;
		LoginManager._channel = channel;
		LoginManager._account = account;
		LoginManager._password = pwd;
		LoginManager.Connect(LoginManager._address, LoginManager._port);
	}
	/// <summary>
	/// token调试登录,除了_loginMode和TokenLogin不一样，其它都一样
	/// </summary>
	/// <param name="loginChannel"></param>
	/// <param name="tokenAccount"></param>
	public static TokenDebug(loginChannel: string, tokenAccount: string)
	{
		LoginManager._loginMode = LoginMode.TokenDebug;
		LoginManager._isLogin = 1;
		LoginManager._channel = loginChannel;
		LoginManager._tokenCode = tokenAccount;
		LoginManager._tokenLoginCount = 0;
		LoginManager.TokenLoginCoroutine();
	}
	private static _loginTimeId: number;
	/// <summary>
	/// 平台token登录
	/// </summary>
	/// <param name="loginChannel"></param>
	/// <param name="token"></param>
	public static TokenLogin(loginChannel: string, token: string)
	{
		LoginManager._loginMode = LoginMode.Token;
		LoginManager._isLogin = 1;
		LoginManager._channel = loginChannel;
		LoginManager._tokenCode = token;
		LoginManager._tokenLoginCount = 0;
		clearTimeout(LoginManager._loginTimeId);
		LoginManager._loginTimeId = egret.setTimeout(LoginManager.TokenLoginCoroutine, this, 1000);
	}
	private static TokenLoginCoroutine()
	{
		LoginManager._tokenLoginCount++;
		clearTimeout(LoginManager._loginTimeId);
		LoginManager.Connect(LoginManager._address, LoginManager._port);
	}
	/// <summary>
	/// 游戏账号注册
	/// </summary>
	/// <param name="account"></param>
	/// <param name="pwd"></param>
	public static AccountRegister(channel: string, account: string, pwd: string)
	{
		LoginManager._loginMode = LoginMode.Account;
		LoginManager._isLogin = 611;
		LoginManager._channel = channel;
		LoginManager._account = account;
		LoginManager._password = pwd;
		LoginManager.Connect(LoginManager._address, LoginManager._port);
	}

	//------------------------------------------------------------------
	// private
	//------------------------------------------------------------------

	private static Connect(address: string, port: number)
	{
		if (LoginManager._socket == null)
		{
			LoginManager._socket = new LoginSocket();
			LoginManager._socket.initialize(GameSetting.LoginBin);
		}
		//
		LoginManager.Close();
		UIManager.addEventListener(UIModuleName.LoadingPanel, UIModuleEvent.OnTimeout, LoginManager.OnLoadingTimeout, this)
		UIManager.showPanel(UIModuleName.LoadingPanel);
		LoginManager._socket.AddMessageListener(LoginManager.OnLoginMessage);
		LoginManager._socket.AddResultListener(LoginManager.OnResult);
		LoginManager._socket.Connect(address, port);
	}
	private static OnLoadingTimeout()
	{
		LoginManager.Close();
		AlertManager.showSingleAlert("网络连接超时！", LoginManager.OnErrorConfirm, null, null, "网络超时");
	}
	private static OnLogin(result: SpRpcResult)
	{
		LoginManager._socket.RemoveCommandListener(Command.Login_login, LoginManager.OnLogin);
		let serverVersion: string = result.data["Version"];
		if (VersionManager.VerifyGameServer(serverVersion))//
		{
			let challenge: string = result.data["challenge"];
			let serverkey: string = result.data["serverkey"];
			//
			LoginManager._hexsecret = "266f889930929ff7";
			let hmac = Crypt.HmacSha1(LoginManager._hexsecret, challenge);
			//交换
			LoginManager._socket.AddCommandListener(Command.Login_exchange, LoginManager.OnExchange)
			LoginManager._socket.Send(Command.Login_exchange, { "hmac": hmac });
		}
		else
		{
			UIManager.closePanel(UIModuleName.LoadingPanel);
			LoginManager.RemoveAllListener();
		}
	}
	private static OnExchange(result: SpRpcResult)
	{
		LoginManager._socket.RemoveCommandListener(Command.Login_exchange, LoginManager.OnExchange);
		//
		let deviceId: string = ChannelManager.deviceId;
		let token: string = StringConstant.empty;
		if (LoginManager._loginMode == LoginMode.Account)
		{
			token = StringUtil.format("{0}@{1}:{2}", Crypt.lb64encode(LoginManager._account), Crypt.lb64encode(LoginManager._password), LoginManager._isLogin);
		}
		else if (LoginManager._loginMode == LoginMode.Guest)
		{
			token = deviceId;
		}
		else
		{
			token = LoginManager._tokenCode;
		}
		token = Crypt.AESEncrypt(token, LoginManager._hexsecret);
		LoginManager._socket.AddCommandListener(Command.Login_auth, LoginManager.OnAuth);
		//
		let bundleId: string = ChannelManager.bundleId;
		LoginManager._socket.Send(Command.Login_auth, { "token": token, "channel": LoginManager._channel, "device": deviceId, "bid": bundleId });
	}

	private static OnAuth(result: SpRpcResult)
	{
		LoginManager._socket.RemoveCommandListener(Command.Login_auth, LoginManager.OnAuth);
		LoginManager.Close();
		UIManager.closePanel(UIModuleName.LoadingPanel);
		//
		LoginManager._loginInfo = LoginInfo.CreateFromProto(result.data); //todo 需要处理data异常的问题
		LoginManager._loginInfo.secret = LoginManager._hexsecret;
		if (LoginManager._loginMode == LoginMode.Token)
		{
			if (LoginManager._loginInfo.channeldata != null)
			{
				if (LoginManager._loginInfo.channeldata.hasOwnProperty("account"))
				{
					LoginManager._account = LoginManager._loginInfo.channeldata["account"] as string;//_account不能设置默认为空，因为登录时候有赋值
				}
				if (LoginManager._loginInfo.channeldata.hasOwnProperty("token"))
				{
					LoginManager._channelToken = LoginManager._loginInfo.channeldata["token"] as string;
				}
				else
				{
					LoginManager._channelToken = StringConstant.empty;
				}
				ChannelManager.SetChannelData(LoginManager._account, LoginManager._channelToken);//设置回sdk，因为有些sdk需要用到服务器的sdk数据
			}
		}
		//
		else if (LoginManager._loginMode == LoginMode.Account)
		{
			if (LoginManager._account)
			{
				PrefsManager.SetAccountPassword(LoginManager._account, LoginManager._password);
			}
		}
		SocketManager.Dispose();//登录过，要销毁游戏Socket，保证都是重新开始的
		LoginManager.OnComplete.dispatch();
	}
	private static OnLoginMessage(msg: SocketMessage)
	{
		NetUtil.Log(msg);
		switch (msg.type)
		{
			case SocketMessageType.Connect:
				console.log("Login服务器连接成功");
				//握手
				let vvv: string = "0.0.0";
				LoginManager._clientKey = "xuEaV3HSKms=";
				LoginManager._socket.AddCommandListener(Command.Login_login, LoginManager.OnLogin);
				LoginManager._socket.Send(Command.Login_login, { "clientkey": LoginManager._clientKey, "Version": vvv });//VersionManager.clientVersion
				// LoginManager._clientKey = Crypt.lrandomkey();
				// LoginManager._socket.SendAsync(Command.Login_login, { "clientkey": Crypt.lb64encode(Crypt.ldhexchange(LoginManager._clientKey)), "Version": "0.1.0" });//VersionManager.clientVersion
				break;
			case SocketMessageType.NetworkError:
			case SocketMessageType.Failing:
				UIManager.closePanel(UIModuleName.LoadingPanel);
				LoginManager.Close();
				//
				let alertInfo: AlertInfo = new AlertInfo();
				alertInfo.title = "网络异常";
				alertInfo.subTitle = msg.errorCode;
				alertInfo.message = "连接服务器失败";
				alertInfo.OnConfirm = LoginManager.OnErrorConfirm;
				AlertManager.showAlert(alertInfo);
				break;
		}
	}

	/// <summary>
	/// 客户端主动请求的才执行
	/// </summary>
	/// <param name="result"></param>
	private static OnResult(result: SpRpcResult)
	{
		if (result.op == SpRpcOp.Response)
		{
			if (result.error != 0)
			{
				LoginManager.Close();
				UIManager.closePanel(UIModuleName.LoadingPanel);
				if (result.error == LoginManager.TokenErrorCode && LoginManager._tokenLoginCount < LoginManager.TokenLoginTryTimes)
				{
					clearTimeout(LoginManager._loginTimeId);
					LoginManager._loginTimeId = egret.setTimeout(LoginManager.TokenLoginCoroutine, this, 1000);
				}
				else
				{
					//406错误，抛出验证失败的事件
					if (result.error == LoginManager.TokenErrorCode)
					{
						ChannelManager.loginValidateFail();
						LoginManager.OnValiateFail.dispatch();
					}

					let alertInfo: AlertInfo = new AlertInfo();
					alertInfo.title = "提示";
					alertInfo.subTitle = "protocol:" + result.cmdId + ",code:" + result.error;
					alertInfo.message = ErrorDefined.GetInstance().getDetails(result.error);
					alertInfo.OnConfirm = LoginManager.OnErrorConfirm;
					console.warn(StringUtil.format("{0},描述：{1}", alertInfo.subTitle, alertInfo.message));
					AlertManager.showAlert(alertInfo);
				}
			}
		}
	}
	private static OnErrorConfirm(obj: any)
	{
		LoginManager.OnError.dispatch();
	}
	/**
	 * 发送创建角色信息请求
	*/
	public static reqCreateRole(sex: number, name: string)
	{
		SocketManager.AddCommandListener(Command.Req_BindId_3025, LoginManager.createRoleResponse);  //协议待添加
        SocketManager.Send(Command.Req_BindId_3025, { "sex": sex,"name":name});
	}
	/**
	 * 创建角色信息请求回调处理
	*/
	 public static createRoleResponse()
    {
        SocketManager.RemoveCommandListener(Command.Req_BindId_3025, LoginManager.createRoleResponse);    //协议待添加
		LoginManager.OnCreateRole.dispatch();
    }
	//------------------------------------------------------------------
	// event
	//------------------------------------------------------------------

	/**
	 * 登录完成
	 */
	public static OnComplete: ActionDispatcher = new ActionDispatcher();
	/**
	 * 登录错误
	 */
	public static OnError: ActionDispatcher = new ActionDispatcher();
	/**
	 * 406错误，验证token失败
	 */
	public static OnValiateFail: ActionDispatcher = new ActionDispatcher();
	/**
	 * 创建角色成功
	*/
	public static OnCreateRole: ActionDispatcher = new ActionDispatcher();
}