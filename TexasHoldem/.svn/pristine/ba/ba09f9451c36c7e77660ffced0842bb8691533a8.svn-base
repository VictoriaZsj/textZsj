/**
 * 带有选项组件
 */
class TabComponent extends BaseComponent<Array<any>>
{

    public tabBar: eui.TabBar;
    public viewStack: eui.ViewStack;
    private disableTabIndex: number;
    public disableTabDes: string;
    private tabSkinName: string;
    private enterTabindex: number;
    /**
     * 是否开启缓动
     */
    public isTween: boolean = true;
    public constructor()
    {
        super();
    }

    protected onAwake(event: eui.UIEvent)
    {
        super.onAwake(event);
        this.viewStack = new eui.ViewStack();
        this.tabBar = new eui.TabBar();
        this.tabBar.horizontalCenter = 0;
        this.viewStack.horizontalCenter = 0;
        this.disableTabIndex = -1;
        this.disableTabDes = "";
        this.enterTabindex = -1;
    }

    public init(data: any, appendData?: any)
    {
        this.bindData = data;
        if (appendData)
        {
            if (appendData.tabSkinName)
            {
                this.tabSkinName = appendData.tabSkinName;
            }
            if (appendData.enterTabindex != undefined)
            {
                this.enterTabindex = appendData.enterTabindex;
            }
        }
    }

    protected rendererStart(event: egret.Event)
    {
        super.rendererStart(event);
        if (!this.bindData)
        {
            console.log("传入数据为空");
            return;
        }
        if (typeof this.bindData[0] =='string'&&this.bindData[0].constructor == String) 
        {
            let array = new eui.ArrayCollection(this.bindData);
            this.tabBar.dataProvider = array;
            //this.tabBar.addEventListener(eui.ItemTapEvent.ITEM_TAP, this.onBarItemTap, this);
        }
        else if (this.bindData[0] instanceof eui.Group)
        {
            for (let i = 0; i < this.bindData.length; i++)
            {
                this.viewStack.addChild(this.bindData[i]);
            }
            this.tabBar.dataProvider = this.viewStack;
            if (this.enterTabindex != -1)
            {
                this.viewStack.selectedIndex = this.enterTabindex;
            }
            this.addChild(this.viewStack);
        }
        else
        {
            console.log("传入类型错误");
            return;
        }


        if (this.tabSkinName)
        {
            this.tabBar.itemRendererSkinName = this.tabSkinName;
        }
        else
        {
            this.tabBar.itemRendererSkinName = UIComponentSkinName.ButtonSkin2;
        }

        if (this.enterTabindex != -1)
        {
            this.tabBar.selectedIndex = this.enterTabindex;
        }
        this.addChild(this.tabBar);

    }

    protected onEnable(event: eui.UIEvent): void
    {
        super.onEnable(event);
        if (this.isTween)
        {
            this.setEnterAnime();
        }
        this.tabBar.addEventListener(egret.Event.CHANGING, this.disableChanging, this);
    }

    protected onDisable(event: eui.UIEvent): void
    {
        super.onDisable(event);
        this.tabBar.removeEventListener(egret.Event.CHANGING, this.disableChanging, this);
    }
    /**
     * 禁用某个选项卡
     */
    public setDisableTabIndex(index: number)
    {
        this.disableTabIndex = index;
    }

    private disableChanging(event: egret.Event)
    {
        if (this.tabBar.selectedIndex == this.disableTabIndex)
        {
            event.preventDefault();
            AlertManager.showSingleAlertByString(this.disableTabDes);
        }
    }

    public setEnterTabGroup(item: eui.Group)
    {
        if (!this.bindData)
        {
            console.log("传入数据为空");
            return;
        }
        for (let i = 0; i < this.bindData.length; i++)
        {
            if (this.bindData[i] == item)
            {
                this.enterTabindex = i;
            }
        }
    }
    private setEnterAnime()
    {
        egret.Tween.removeTweens(this.tabBar);
        egret.Tween.removeTweens(this.viewStack);
        this.tabBar.scaleX = 0;
        this.tabBar.scaleY = 0;
        egret.Tween.get(this.tabBar).wait(100).to({ scaleX: 1, scaleY: 1 }, 200);
        this.viewStack.y = 1280;
        egret.Tween.get(this.viewStack).wait(200).to({ y: this.tabBar.y - 100 }, 250);
    }
}