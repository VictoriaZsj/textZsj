/**
 * 版本管理
 */
class VersionManager
{
	/**
	 * 登录端口
	 */
	public static get loginPort(): number
	{
		if (VersionManager._isClientTest)
		{
			return ProjectDefined.GetInstance().getValue(ProjectDefined.testPort);
		}
		return ProjectDefined.GetInstance().getValue(ProjectDefined.port);
	}
	/**
	 * 登录地址
	 */
	public static get loginAddress(): string
	{
		if (VersionManager._isClientTest)
		{
			return ProjectDefined.GetInstance().getValue(ProjectDefined.testAddress);

		}
		return ProjectDefined.GetInstance().getValue(ProjectDefined.address);
	}

	private static _isMaintain: boolean;
	private static _clientVersion: string;
	private static _clientVersionArray: Array<string>;
	private static _isClientTest: boolean;

	private static _isSafe: boolean = false;

	public static get isSafe(): boolean
	{
		return VersionManager._isClientTest && VersionManager._isSafe;
	}

	public static get isClientTest(): boolean
	{
		return VersionManager._isClientTest;
	}
	public static Initialize(): void
	{
		let clientVersion: string;
		if (ChannelManager.clientVersion) //todo开发模式用
		{
			clientVersion = ChannelManager.clientVersion;
		}
		else
		{
			clientVersion = ProjectDefined.GetInstance().getValue(ProjectDefined.version);
		}
		VersionManager.SetClientVersion(clientVersion);
	}
	/**
	 * 渠道初始化完毕
	 */
	public static loadServerVersion()
	{
		RES.getResByUrl(ProjectDefined.GetInstance().getValue(ProjectDefined.versionUrl) + "?=" + Math.random().toString(), VersionManager.onLoadVersionComplete, this, RES.ResourceItem.TYPE_JSON);
	}
	private static onLoadVersionComplete(data: any)
	{
		if (data)
		{
			VersionManager._isSafe = DEBUG ? false : parseInt(data.safe) == 1;
			VersionManager._isMaintain = parseInt(data.mt) == 1;
			let serverVersion: string = data.version;
			VersionManager.verifyVersion(serverVersion, VersionManager._clientVersion, JSON.stringify(data));
		}
		else
		{
			VersionManager.onLoadError();
		}
	}
	/**
	 * 检测安装包版本
	 */
	private static verifyVersion(serverVersion: string, clientVersion: string, data: string)
	{
		if (!serverVersion)
		{
			VersionManager.onLoadError();
		}
		let serverVList: Array<number> = StringUtil.toIntArray(serverVersion, StringConstant.Dot);
		let clientVLit: Array<number> = StringUtil.toIntArray(clientVersion, StringConstant.Dot);
		VersionManager._isClientTest = DEBUG ? true : VersionUtil.CompareAllForce(clientVLit, serverVList);
		if (serverVList && clientVLit && serverVList.length > 2 && clientVLit.length > 2
			&& egret.Capabilities.runtimeType == egret.RuntimeType.NATIVE) //原生版本检测
		{
			if (VersionUtil.CompareForce(serverVList, clientVLit)) //强制更新版本 | 版本的前两位 | 服务器的版本大于本地版本
			{
				AlertManager.showSingleAlert("游戏有新版本更新，需要更新才能进入游戏，点击确定前往更新!", VersionManager.gotoLoadNewVersion);
			}
			else
			{
				if (VersionManager._isMaintain && !VersionManager._isClientTest)
				{
					VersionManager.LoadMaintainTxt();
				}
				else if (VersionManager._isClientTest) //提审or测试版本|本地版本大于服务器版本
				{
					ChannelManager.sdkOnHotUpdate();
				}
				else if (VersionUtil.CompareOptimize(serverVList, clientVLit))//有优化包
				{
					AlertManager.showDoubleAlert("游戏有新版本更新，是否前往更新？", VersionManager.gotoLoadNewVersion, ChannelManager.hotUpdate, null, null, null, null, null, data);
				}
				else
				{
					ChannelManager.hotUpdate(data);
				}
			}
		}
		else
		{
			ChannelManager.sdkOnHotUpdate();
		}
	}
	private static onLoadError()
	{
		AlertManager.showSingleAlert("加载版本文件失败！点击确定重新加载！", VersionManager.onReTryLoadVersion);
	}
	private static onReTryLoadVersion()
	{
		VersionManager.loadServerVersion();
	}
	private static SetClientVersion(ver: string)
	{
		VersionManager._clientVersion = ver;
		VersionManager._clientVersionArray = ver.split(StringConstant.Dot);
	}
	/**
	 * 跳转下载新的版本
	 */
	private static gotoLoadNewVersion()
	{

	}
	/**
	 * 验证服务器版本(游戏内容版本)
	 */
	public static VerifyGameServer(gameServerVersion: string): boolean
	{
		let gsv: Array<number> = StringUtil.toIntArray(gameServerVersion, StringConstant.Dot);
		if ((parseInt(VersionManager._clientVersionArray[0]) != gsv[0]) || (parseInt(VersionManager._clientVersionArray[1]) < gsv[1]))
		{
			let info: AlertInfo = new AlertInfo();
			info.title = "版本错误";
			info.message = "客户端版本与服务器版本不匹配，请更新客户端再进游戏。";
			info.confirmLabel = "前往下载";
			info.OnConfirm = VersionManager.OnConfirmUpdate;
			AlertManager.showAlert(info);
			return false;
		}
		return true;
	}
	/**
	 * 加载维护文件
	 */
	private static LoadMaintainTxt()
	{
		RES.getResByUrl(ProjectDefined.GetInstance().getValue(ProjectDefined.maintainUrl), VersionManager.OnMaintainComplete, RES.ResourceItem.TYPE_JSON);
	}
	private static OnMaintainComplete(data: any)
	{
		if (data)
		{
			AlertManager.showSingleAlert(data.text, VersionManager.onReTryLoadVersion);
		}
		else
		{
			AlertManager.showSingleAlert("游戏停机维护中，届时将无法登录游戏，请各位相互转告。具体开服时间可能会根据实际情况通告，敬请谅解。", VersionManager.onReTryLoadVersion);
		}
	}
	private static OnConfirmUpdate(o: any)
	{
		// updateHandler.OpenUpdateUrl();
	}

	/**
	 * 根据安全开关来控制组件的显示
	 */
	public static setComponentVisibleBySafe(...args)
	{
		if (args != null)
		{
			if (VersionManager.isSafe)
			{
				for (let i: number = 0; i < args.length; i++)
				{
					if (args[i])
					{
						args[i].visible = false;
					}
				}
			}
			else
			{
				for (let i: number = 0; i < args.length; i++)
				{
					if (args[i])
					{
						args[i].visible = true;
					}
				}
			}
		}
	}
}