/**
 * 渠道管理/原生扩展管理
 */
class ChannelManager 
{
	//------------------------------------------------------------------
	// sdk回调执行方法
	//------------------------------------------------------------------

	public static sdkInitComplete(json: string): void
	{
		ChannelManager._isInitComplete = true;
		let data: any = JSON.parse(json);
		ChannelManager._channelType = data['channelType'];
		ChannelManager._appName = data['appName'];
		ChannelManager._deviceId = data['deviceId'];
		ChannelManager._bundleId = data['bundleId'];
		ChannelManager._clientVersion = data['clientVersion'];
		ChannelManager._hasWeixin = StringUtil.toBoolean(data['hasWeixin']);
		ChannelManager._hasMicrophone = StringUtil.toBoolean(data['hasMicrophone']);
		if (StringUtil.isNullOrEmpty(ChannelManager._channelType))
		{
			ChannelManager._channelType = ChannelManager._operatePlatform;
		}
		ChannelManager.OnInitComplete.dispatch();
	}
	public static sdkLoginSucceed(token: string): void
	{
		ChannelManager.OnTokenLoginSucceed.dispatch(token);
	}
	public static sdkLoginFailed(): void
	{
		ChannelManager.OnLoginFailed.dispatch();
	}
	public static sdkPaySucceed(data: string): void
	{
		// UIManager.HideModule(UIModuleName.PayMaskPanel);
		ChannelManager._channel.sdkPaySucceed(data);
	}
	public static sdkPayFailed(): void
	{
		// UIManager.HideModule(UIModuleName.PayMaskPanel);
		ChannelManager._channel.sdkPayFailed();
	}
	public static sdkShareSucceed(): void
	{
		ChannelManager.OnShareSucceed.dispatch();
	}
	public static sdkShareFailed(): void
	{
		ChannelManager.OnShareFailed.dispatch();
	}
	public static sdkLogout(): void
	{
		// SystemManager.ReLogin(SystemReenterType.Logout);
		ChannelManager.OnLogout.dispatch();
	}
	public static sdkRecordComplete(data: string): void
	{
		RecordAudioManager.RecordComplete(data);
	}
	public static sdkBackToApplication(): void
	{
		ChannelManager.OnBackToApplication.dispatch();
	}
	/**
	 * 热更新检测完毕
	 */
	public static sdkHotUpdateComplete(): void
	{
		ChannelManager.OnHotUpdateComplete.dispatch();
	}
	/**
	 * 调回是否有记录的数据
	 */
	public static sdkHasRecordData(message: string)
	{
		ChatManager.checkComplete(message);
	}

	//------------------------------------------------------------------
	// 
	//------------------------------------------------------------------

	private static _operatePlatform: string;
	/**
	 * 运营平台
	 */
	public static get operatePlatform(): string
	{
		return ChannelManager._operatePlatform;
	}
	private static _channelType: string = StringConstant.empty;
	/**
	 * 渠道类型
	 */
	public static get channelType(): string
	{
		if (ChannelManager._customChannelType)
		{
			return ChannelManager._customChannelType;
		}
		return ChannelManager._channelType;
	}
	private static _loginType: string;
	/**
	 * 渠道登录类型
	 */
	public static get loginType(): string
	{
		if (ChannelManager._customLoginType)
		{
			return ChannelManager._customLoginType;
		}
		return ChannelManager._loginType;
	}
	public static set loginType(value: string)
	{
		ChannelManager._loginType = value;
	}
	private static _customChannelType = null;
	private static _customLoginType = null;
	/// <summary>
	/// 自定义设置的登录渠道类型(编辑器和winodow版有效)
	/// </summary>
	/// <param name="type"></param>
	public static SetCustomLoginChannel(channelType: string, loginType: string)
	{
		ChannelManager._customChannelType = channelType;
		ChannelManager._customLoginType = loginType;
	}
	/// <summary>
	/// 获取渠道类型+登录类型
	/// </summary>
	/// <returns></returns>
	public static GetLoginChannel(): string
	{
		return ChannelUtil.GetLoginChannel(ChannelManager.channelType, ChannelManager.loginType);
	}
	private static _channel: ChannelBase;//渠道处理类
	private static _isInitComplete: boolean = false;//渠道初始化是否完成
	private static _appName: string;
	/**
	 * 应用名
	 */
	public static get appName(): string
	{
		return ChannelManager._appName;
	}
	private static _deviceId: string;
	/**
	 * 设备id
	 */
	public static get deviceId(): string
	{
		return ChannelManager._deviceId;
	}
	private static _bundleId: string;
	/**
	 * 包id
	 */
	public static get bundleId(): string
	{
		return ChannelManager._bundleId;
	}
	private static _hasWeixin: boolean;
	/**
	 * 是否安装有微信
	 */
	public static get hasWeixin(): boolean
	{
		return ChannelManager._hasWeixin;
	}
	private static _hasMicrophone: boolean
	/**
	 * 是否有麦克风或麦克风权限
	 */
	public static get hasMicrophone(): boolean
	{
		return ChannelManager._hasMicrophone;
	}
	private static _clientVersion: string;
	/**
	 * 本地最新客户端版本
	 */
	public static get clientVersion(): string
	{
		return ChannelManager._clientVersion;
	}

	//------------------------------------------------------------------
	// 
	//------------------------------------------------------------------

	/**
	 * 初始化
	 */
	public static Initialize()
	{
		if (ChannelManager._isInitComplete)
		{
			ChannelManager.OnInitComplete.dispatch();
			return;
		}
		ChannelManager._operatePlatform = OperatePlatform.current;
		if (egret.Capabilities.os == 'iOS')
		{
			ChannelManager._channel = new Channel_ios();
		}
		else if (egret.Capabilities.os == 'Android')
		{
			ChannelManager._channel = new Channel_android();
		}
		else
		{
			ChannelManager._channel = new Channel_web();
		}
		//
		egret.ExternalInterface.addCallback(ExtFuncName.OnApplicationFocus, function (focusStatus: string)
		{
			let isfocusStatus: boolean = StringUtil.toBoolean(focusStatus);
			if (isfocusStatus)
			{
				// UIManager.HideModule(UIModuleName.PayMaskPanel);
			}
			ChannelManager.OnApplicationFocus.dispatch(isfocusStatus);
		});

		egret.ExternalInterface.addCallback(ExtFuncName.OnInitComplete, ChannelManager.sdkInitComplete);
		egret.ExternalInterface.addCallback(ExtFuncName.OnLoginSucceed, ChannelManager.sdkLoginSucceed);
		egret.ExternalInterface.addCallback(ExtFuncName.OnLoginFailed, ChannelManager.sdkLoginFailed);
		egret.ExternalInterface.addCallback(ExtFuncName.OnPaySucceed, ChannelManager.sdkPaySucceed);
		egret.ExternalInterface.addCallback(ExtFuncName.OnPayFailed, ChannelManager.sdkPayFailed);
		egret.ExternalInterface.addCallback(ExtFuncName.OnShareSucceed, ChannelManager.sdkShareSucceed);
		egret.ExternalInterface.addCallback(ExtFuncName.OnShareFailed, ChannelManager.sdkShareFailed);
		egret.ExternalInterface.addCallback(ExtFuncName.OnLogout, ChannelManager.sdkLogout);
		egret.ExternalInterface.addCallback(ExtFuncName.OnBackToApplication, ChannelManager.sdkBackToApplication);
		egret.ExternalInterface.addCallback(ExtFuncName.OnHotUpdate, ChannelManager.sdkHotUpdateComplete);
		//录音
		egret.ExternalInterface.addCallback(ExtFuncName.OnRecordComplete, ChannelManager.sdkRecordComplete);
		egret.ExternalInterface.addCallback(ExtFuncName.OnHasRecordData, ChannelManager.sdkHasRecordData);
		//
		ChannelManager._channel.Initialize();
	}
	/// 登录
	/// </summary>
	/// <param name="loginType"></param>
	/// <param name="isAutoLogin">是否自动登录</param>
	public static Login(loginType: string, isAutoLogin: boolean = false)
	{
		ChannelManager._channel.Login(loginType, isAutoLogin);
	}
	/**
	 * 登出
	 */
	public static Logout()
	{
		ChannelManager._channel.Logout();
	}
	/// <summary>
	/// 支付发送
	/// </summary>
	/// <param name="awardId"></param>
	public static PaySend(id: number)
	{
		let payDef: ShoppingDefinition = PayDefined.GetInstance().getDefinition(id);
		let shopName: string = StringConstant.empty;
		if (payDef)
		{
			let awardDef: AwardDefinition = AwardDefined.GetInstance().getAwardDefinition(payDef.awardId);
			if (awardDef && (awardDef.rewardNum as any as Array<number>).length > 0)//todo
			{
				let rewardNum: number = awardDef.rewardNum[0];
				if (rewardNum > 0)
				{
					shopName = payDef.awardId.toString();
					let orderId: string = ChannelUtil.GenerateOrder(payDef.awardId, VersionManager.isClientTest);//订单id			
					ChannelManager._channel.PaySend(UserManager.serverInfo.id, orderId, rewardNum, shopName);
				} else
				{
					console.log("支付异常");
				}
			}
		}
	}

	/// <summary>
	/// android退出游戏要处理退出sdk
	/// </summary>
	public static Exit()
	{
		ChannelManager._channel.Exit();
	}
	/// <summary>
	/// 设置sdk扩展数据
	/// </summary>
	public static SetExtData()
	{
		let data: any = {};
		data["channelToken"] = LoginManager.channelToken;
		data["userId"] = LoginManager.loginInfo.userid;
		data["loginChannel"] = ChannelManager.GetLoginChannel();
		ChannelManager._channel.SetExtData(JSON.stringify(data));
	}
	public static SetChannelData(account: string, token: string): void
	{
		ChannelManager._channel.SetChannelData(account, token);
	}
	/**
	 * 检查支付订单（苹果丢单处理,第一次进主场景时候检查）
	 */
	public static CheckPayOrder()
	{
		ChannelManager._channel.CheckPayOrder();
	}
	/**
	 * 验证token失败，清除存储的openid和token
	 */
	public static loginValidateFail()
	{
		ChannelManager._channel.loginValidateFail();
	}
	/**
	 * 微信分享
	 */
	public static share(message: string)
	{
		/*
		VersionManager.updateHandler.GetUpdateChannelURL(function(url:string){
			let data:any = {};
			data['message'] = message;
			data['url'] = url;
			ChannelManager._channel.share(JSON.stringify(data));
		});
		*/
	}
	/**
	 * 请求一次麦克风权限(ios、android有弹窗确认)
	 */
	public static requestMicrophone()
	{
		ChannelManager._channel.requestMicrophone();
	}
	/**
	 * 录音
	 */
	public static recordAudio(code: number)
	{
		RecordAudioManager.RecordVoice(code);
		ChannelManager._channel.recordAudio(code.toString());
	}
	/**
	 * 检测热更新
	 */
	public static hotUpdate(message: string)
	{
		ChannelManager._channel.hotUpdate(message);
	}
	/**
	 * 设置录音数据
	 */
	public static setRecordData(guid: string, data: string)
	{
		ChannelManager._channel.setRecordData(guid, data);
	}
	/**
	 * 检查缓存路径 如果不存在则创建
	 */
	public static checkAudioCachePath()
	{
		ChannelManager._channel.checkAudioCachePath();
	}
	/**
	 * 本地是否已经存在录音文件
	 */
	public static hasRecordData(guid: string)
	{
		ChannelManager._channel.hasRecordData(guid);
	}
	/**
	 * 播放录音
	 */
	public static playRecord(guid: string)
	{
		ChannelManager._channel.playRecord(guid);
	}
	//------------------------------------------------------------------
	// Event
	//------------------------------------------------------------------

	/**
	 * 应用 获取/失去 焦点
	 */
	public static OnApplicationFocus: DelegateDispatcher = new DelegateDispatcher();
	/**
	 * token调试登录成功
	 */
	public static OnTokenDebug: DelegateDispatcher = new DelegateDispatcher();
	/**
	 * 账号登录成功
	 */
	public static OnAccountLoginSucceed: DelegateDispatcher = new DelegateDispatcher();//Action< string, string, bool >
	public static DispatchAccountLoginSucceed(account: string, password: string, isRegister: boolean = false)
	{
		ChannelManager.OnAccountLoginSucceed.dispatch([account, password, isRegister]);
	}
	/**
	 * 初始化完成
	 */
	public static OnInitComplete: DelegateDispatcher = new DelegateDispatcher();
	/**
	 * 检测热更新完毕
	 */
	public static OnHotUpdateComplete: DelegateDispatcher = new DelegateDispatcher();
	/**
	 * token登录成功
	 */
	public static OnTokenLoginSucceed: DelegateDispatcher = new DelegateDispatcher();
	/**
	 * 登录错误
	 */
	public static OnLoginFailed: DelegateDispatcher = new DelegateDispatcher();
	/**
	 * 游戏登出
	 */
	public static OnLogout: DelegateDispatcher = new DelegateDispatcher();
	/**
	 * 从其他程序返回当前程序的事件
	 */
	public static OnBackToApplication: DelegateDispatcher = new DelegateDispatcher();
	public static OnShareSucceed: DelegateDispatcher = new DelegateDispatcher();
	public static OnShareFailed: DelegateDispatcher = new DelegateDispatcher();
}