/**
 * 初始化模块服务器消息逻辑（主要与服务器通信）
 */
class InitServerHandler
{
	private _isComplete: boolean = false;
	public get isComplete(): boolean
	{

		return this._isComplete;
	}

	//------------------------------------------------------------------
	// 有顺序的，必须加载才能进游戏的
	//------------------------------------------------------------------

	private _isGeting: boolean = false;
	private _complete: Function;
	private _error: Function;


	/// <summary>
	/// 进游戏前初始化调用
	/// </summary>
	/// <param name="loginInfo"></param>
	/// <param name="serverInfo"></param>
	/// <param name="complete"></param>
	/// <param name="error"></param>
	public Invoke(loginInfo: LoginInfo, serverInfo: ServerInfo, complete: Function, error: Function)
	{
		this._isComplete = false;
		this._complete = complete;
		this._error = error;
		UserManager.serverInfo = serverInfo;

		SocketManager.Close();
		SocketManager.Initialize(loginInfo.userid, serverInfo.roleId, serverInfo.id, loginInfo.secret, loginInfo.session, GameSetting.Gamec2sBin, GameSetting.Games2cBin);
		this.RemoveEvents();
		SocketManager.OnConnect.addListener(this.OnSocketConnect, this);
		SocketManager.OnEnterError.addListener(this.OnEnterError, this);
		SocketManager.isEntering = true;
		SocketManager.Connect(loginInfo.ip, loginInfo.port, true); //loginInfo.gameDomin
	}
	/// <summary>
	/// 当发送给服务器成功，在服务器返回之前断线，然后重连请求一样的session时候，重新拉数据
	/// </summary>
	public AfreshGetInfo()
	{
		if (this._isGeting == false)
		{
			this._isGeting = true;
			SocketManager.AddCommandListener(Command.Role_Get_3000, this.OnRoleInfo);
			SocketManager.Send(Command.Role_Get_3000);
		}
	}
	private RemoveEvents()
	{
		SocketManager.OnConnect.removeListener(this.OnSocketConnect);
		SocketManager.OnEnterError.removeListener(this.OnEnterError);
	}
	private OnSocketConnect()
	{
		SocketManager.AddCommandListener(Command.Role_Get_3000, this.OnRoleInfo, this);
		SocketManager.Send(Command.Role_Get_3000);
	}
	private OnEnterError()
	{
		this.DispatchError();
	}
	private OnRoleInfo(result: SpRpcResult)
	{
		if (LoginManager.loginInfo.hasAlreadyCreateRole == false)
		{
			LoginManager.loginInfo.hasAlreadyCreateRole = true;
		}
		SocketManager.RemoveCommandListener(Command.Role_Get_3000, this.OnRoleInfo);
		if (UserManager.serverInfo.roleId == 0)
		{
			//创建角色后，从socket里获取角色id
			UserManager.serverInfo.roleId = SocketManager.roleId;
			//创建角色统计
			// ChannelManager.SetCreateRole(SocketManager.roleId, _serverInfo.id, _serverInfo.definition.name);
		}
		BringCardManager.isGotShare = result.data["isGotShare"];
		BringCardManager.shareId = result.data["shareId"];
		//
		// LoggerManager.emailLogger.SetRoleId(SocketManager.roleId, _serverInfo.id);
		// TimeManager.Initialize(table);
		UserManager.initialize(SocketManager.roleId, result.data);//一定要用socket返回的roleId
		PayManager.initialize();
		VipManager.initialize(result);
		TimeManager.initialize(result.data);
		this.RequestNotice();
		// UserManager.initialize(SocketManager.roleId, _serverInfo.definition, table);//一定要用socket返回的roleId
		// this.DispatchComplete();
	}
	/// <summary>
	/// 请求服务器推送 在所有拉取协议之后调用
	/// </summary>
	private RequestNotice()
	{
		RoomManager.reqJoinRoomEA.addListener(this.OnGetNotice, this);
		RoomManager.reqJoinRoom(0, SocketManager.requestSessionMax);
	}
	private OnGetNotice()
	{
		RoomManager.reqJoinRoomEA.removeListener(this.OnGetNotice);
		SocketManager.isEntering = false;//进游戏结束,开启重连，提示正常处理
		// TDEventStatistics.NewUser_EnterGame();
		this.DispatchComplete();
	}
	private DispatchComplete()
	{
		this.RemoveEvents();
		this._isGeting = false;
		this._isComplete = true;
		if (this._complete != null) 
		{
			this._complete();
			this._complete = null;
		}
	}
	private DispatchError()
	{
		this.RemoveEvents();
		this._isGeting = false;
		if (this._error != null)
		{
			this._error();
			this._error = null;
		}
	}
}
