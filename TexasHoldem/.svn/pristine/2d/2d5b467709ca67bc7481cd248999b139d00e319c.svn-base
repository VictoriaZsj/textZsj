/**
 * 邮件管理
 */
class MailManager
{
    public static mailList: Array<MailInfo> = new Array<MailInfo>();

    /**
     * 未读邮件数量
     */
    public static unReadCount:number = 0;

    /**
     * 已经请求过数据
     */
    public static isRequestingFirstComplete: boolean = false;

    /**
     * 重置数据
     */
    public static Reset()
    {
        MailManager.unReadCount = 0;
        MailManager.isRequestingFirstComplete = false;
        ArrayUtil.Clear(MailManager.mailList);
        //GetUnReadCount();
        SocketManager.AddCommandListener(Command.Rec_Mail_New_Notify_2024, MailManager.OnMailNewNofityFromServer);
    }

    /**
     * 新邮件的通知协议
     */
    private static OnMailNewNofityFromServer(result:SpRpcResult)
    {
        MailManager.unReadCount++;
    }

    public static initialize(result: SpRpcResult)
    {
        for (let def of result.data["MailList"])
        {
            let mail: MailInfo = new MailInfo();
            mail.copyValueFrom(def);
            for (let atta of JSON.parse(mail.attaJson))
            {
                let award: AwardInfoDefinition = new AwardInfoDefinition();
                award.id = atta["Id"];
                award.type = atta["Type"];
                award.count = atta["Count"];
                mail.attaList.push(award);
            }
            MailManager.mailList.push(mail);
        }
    }

    /**
     * 请求邮件列表
     */
    public static RequestMailList(startId:number,count:number,isFirst:boolean)
    {

        SocketManager.AddCommandListener(Command.Req_Mail_3097, this.onGetMailList, this);
        SocketManager.Send(Command.Req_Mail_3097, { "StartId": startId, "Count": count});
    }
    private static onGetMailList(result: SpRpcResult)
    {
        SocketManager.RemoveCommandListener(Command.Req_Mail_3097, this.onGetMailList);
        MailManager.initialize(result);
        MailManager.getMailListEvent.dispatch();
    }

    /**
	 * 拉取邮件事件
	 */
	public static getMailListEvent: ActionDispatcher = new ActionDispatcher();
}

class MailInfo extends BaseServerValueInfo
{
    public reset()
    {

    }
    /**
     * 邮件id
     */
    public Id: number;
    /**
     * 是否已读
     */
    public IsRead: boolean;
    /**
     * 邮件类型0系统邮件，1是通知，2是玩家邮件
     */
    public Type: number;
    /**
     * 邮件标题
     */
    public Title: string;
    /**
     * 当type为0的时候的子类型，如果有这个值，则不传递Title
     */
    public SubType: number;
    /**
     * 邮件内容
     */
    public Content: string;
    /**
     * 发送日期
     */
    public Date: number;
    /**
     * 	发送人名字
     */
    public Sender: string;
    /**
     * 发送人Id
     */
    public SenderId: number;
    /**
     * 附件json
     */
    public attaJson: string;
    public attaList: Array<AwardInfoDefinition>;
    /**
     * 是否领取
     */
    public IsGot: boolean;
}