class MathUtil
{
	// Obtient une valeur comprise dans un interval
	public static clamp(value, min, max): number
	{
		if (value < min)
		{
			return min;
		}
		else if (value > max)
		{
			return max;
		}
		return value;
	};
	// Obtient une interpolation linéaire entre 2 valeurs
	public static lerp(value1, value2, amount): number
	{
		amount = amount < 0 ? 0 : amount;
		amount = amount > 1 ? 1 : amount;
		return value1 + (value2 - value1) * amount;
	}
	/**
	 * 获取一个随机值含头尾
	 */
	public static getRandom(start: number, end: number): number
	{
		return Math.round(Math.random() * (end - start)) + start;
	}
	/**
	 * 将大于一万的数转换为数字加“万”或“亿”
	*/
	public static formatNum(num: number): string
	{
		let str: string;
		if (num < 10000)
		{
			str = num.toString();
			return str;
		}
		if (num >= 10000 && num < 100000000)
		{
			if (num % 10000 == 0)
			{
				str = (num / 10000) + "万";
			}
			else
			{
				str = MathUtil.fixedFloor(num / 10000, 2) + "万";
			}
			return str;
		}
		if (num >= 100000000)
		{
			if (num % 100000000 == 0)
			{
				str = (num / 100000000) + "亿";
			}
			else
			{
				str = MathUtil.fixedFloor(num / 100000000, 2) + "亿";
			}

			return str;
		}
	}

	public static fixedFloor(num: number, fractionDigits?: number)
	{
		if(!fractionDigits)
		{
			fractionDigits = 0;
		}
		let str: string = num.toString();
		if (str.indexOf(".") + fractionDigits + 1 > str.length)
		{
			return str;
		}
		else
		{
			return str.substring(0, str.indexOf(".") + fractionDigits + 1);
		}

	}
}