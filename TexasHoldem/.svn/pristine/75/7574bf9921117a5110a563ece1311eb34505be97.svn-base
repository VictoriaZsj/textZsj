/**
 * 界面显示管理 
 */
class UIManager
{
	//游戏内容层
	private static _gameLayer: eui.Group;
	//主界面UI层
	private static _mainUiLayer: eui.Group;
	//模块层
	private static _moduleLayer: eui.Group;
	//tips层
	private static _tipsLayer: eui.Group;
	//引导层
	private static _guideLayer: eui.Group;
	//警告层
	private static _warnLayer: eui.Group;
	//面板对象存储
	private static _panelDict: Dictionary<string, BasePanel>;
	//游戏层级存储
	private static _layerDict: Dictionary<UILayerType, eui.Group>;
	public static stage: egret.Stage;

	public static Init(s: egret.Stage)
	{
		UIManager.stage = s;
		UIManager._gameLayer = new eui.Group();
		UIManager._mainUiLayer = new eui.Group();
		UIManager._moduleLayer = new eui.Group();
		UIManager._tipsLayer = new eui.Group();
		UIManager._guideLayer = new eui.Group();
		UIManager._warnLayer = new eui.Group();
		UIManager.stage.addChild(UIManager._gameLayer);
		UIManager.stage.addChild(UIManager._mainUiLayer);
		UIManager.stage.addChild(UIManager._moduleLayer);
		UIManager.stage.addChild(UIManager._tipsLayer);
		UIManager.stage.addChild(UIManager._guideLayer);
		UIManager.stage.addChild(UIManager._warnLayer);

		UIManager._panelDict = new Dictionary<string, BasePanel>();
		UIManager._layerDict = new Dictionary<UILayerType, eui.Group>();
		UIManager._layerDict.add(UILayerType.GameContent, UIManager._gameLayer);
		UIManager._layerDict.add(UILayerType.MainUI, UIManager._mainUiLayer);
		UIManager._layerDict.add(UILayerType.Module, UIManager._moduleLayer);
		UIManager._layerDict.add(UILayerType.Tips, UIManager._tipsLayer);
		UIManager._layerDict.add(UILayerType.Guide, UIManager._guideLayer);
		UIManager._layerDict.add(UILayerType.Warn, UIManager._warnLayer);

		let layerList: Array<eui.Group> = UIManager._layerDict.getValues();

		let layer: eui.Group;
		for (let i: number = 0; i < layerList.length; i++)
		{
			layer = layerList[i];
			layer.touchEnabled = false;
			layer.width = GameSetting.StageWidth;
			layer.height = GameSetting.StageHeight;
		}
		if (DEBUG)
		{
			let _testPanel: TestPanel = new TestPanel();
			UIManager.stage.addChild(_testPanel);
		}
	}
	public static showPanel(panelName: any, data?: any)
	{
		let targetPanel: BasePanel;
		targetPanel = UIManager._panelDict.getValue(panelName);
		if (!targetPanel) //缓存中没有则创建
		{
			let PanelClass: any = egret.getDefinitionByName(panelName);
			if (PanelClass)
			{
				targetPanel = new PanelClass();
				UIManager._panelDict.add(panelName, targetPanel);
			}
		}
		if (targetPanel)
		{
			let con = UIManager.getLayerContainer(targetPanel.layer);
			UIManager.setAlignInfo(targetPanel);
			targetPanel.init(data);
			if (con)
			{
				con.addChild(targetPanel);
			}
		}
	}
	public static closePanel(panelName: string);
	public static closePanel(panelObj: BasePanel);
	public static closePanel(panel)
	{
		let targetPanel: BasePanel;
		if (typeof panel == "string")
		{
			targetPanel = UIManager.getPanel(panel);
		}
		else if (panel instanceof BasePanel)
		{
			targetPanel = panel as BasePanel;
		}
		if (targetPanel && targetPanel.parent)
		{
			targetPanel.parent.removeChild(targetPanel);
		}
	}
	public static getPanel(panelName: string)
	{
		if (panelName)
		{
			let panel = UIManager._panelDict.getValue(panelName);
			return panel;
		}
		throw new Error("面板名为空！");
	}
	public static getLayerContainer(layer: UILayerType): eui.Group
	{
		if (layer != UILayerType.None)
		{
			return UIManager._layerDict.getValue(layer) as eui.Group;
		}
		return null;
	}
	public static showFloatTips(tips: string)
	{
		UIManager.showPanel(UIModuleName.TextTipsPanel, tips);
	}

	public static takeToTopLayer(panelName: string);
	public static takeToTopLayer(panelObj: BasePanel);
	public static takeToTopLayer(panel: any)
	{
		let targetPanel: BasePanel;
		let con: eui.Group;
		if (typeof panel == "string")
		{
			targetPanel = UIManager.getPanel(panel);
			con = UIManager.getLayerContainer(targetPanel.layer);
		}
		else if (panel instanceof BasePanel)
		{
			targetPanel = panel as BasePanel;
			con = UIManager.getLayerContainer(panel.layer);
		}
		if (con && targetPanel)
		{
			targetPanel.parent.addChild(targetPanel);
		}
	}
	/**
	 * 面板是否显示 根据面板名
	 */
	public static isShowPanel(panelName: string): boolean
	{
		let panel: BasePanel = UIManager.getPanel(panelName);
		return UIManager.isShowPanelObj(panel);
	}
	/**
	 * 面板是否显示
	 */
	public static isShowPanelObj(panel: BasePanel): boolean
	{
		if (panel)
		{
			if (panel.parent && panel.visible)
			{
				return true;
			}
		}
		return false;
	}
	/*设置对齐方式*/
	private static setAlignInfo(target: BasePanel)
	{
		if (!target.tweenGroup)
		{
			return;
		}
		target.top = NaN;
		target.bottom = NaN;
		target.left = NaN;
		target.right = NaN;
		target.horizontalCenter = NaN;
		target.verticalCenter = NaN;
		switch (target.panelAlignType)
		{
			case PanelAlignType.Center_Top:
				target.tweenGroup.horizontalCenter = target.offsetH;
				target.tweenGroup.top = target.offsetV;
				break;
			case PanelAlignType.Center_Center:
				target.tweenGroup.horizontalCenter = target.offsetH;
				target.tweenGroup.verticalCenter = target.offsetV;
				break;
			case PanelAlignType.Center_Bottom:
				target.tweenGroup.horizontalCenter = target.offsetH;
				target.tweenGroup.bottom = target.offsetV;
				break;
			case PanelAlignType.Left_Top:
				target.tweenGroup.left = target.offsetH;
				target.tweenGroup.top = target.offsetV;
				break;
			case PanelAlignType.Left_Bottom:
				target.tweenGroup.left = target.offsetH;
				target.tweenGroup.bottom = target.offsetV;
				break;
			case PanelAlignType.Left_Center:
				target.tweenGroup.left = target.offsetH;
				target.tweenGroup.verticalCenter = target.offsetV;
				break;
			case PanelAlignType.Right_Top:
				target.tweenGroup.right = target.offsetH;
				target.tweenGroup.top = target.offsetV;
				break;
			case PanelAlignType.Right_Center:
				target.tweenGroup.right = target.offsetH;
				target.tweenGroup.verticalCenter = target.offsetV;
				break;
			case PanelAlignType.Right_Bottom:
				target.tweenGroup.right = target.offsetH;
				target.tweenGroup.bottom = target.offsetV;
				break;
		}
	}

	private static _eventDispatcher: CallDispatcher<any> = new CallDispatcher<any>();
	/**
	 * 添加事件
	 */
	public static addEventListener(moduleName: string, eventName: string, listener: Function, thisObject?: any): void
	{
		UIManager._eventDispatcher.addListener(moduleName + eventName, listener, thisObject);
	}
	/**
	 * 移除事件
	 */
	public static removeEventListener(moduleName: string, eventName: string, listener: Function): void
	{
		UIManager._eventDispatcher.removeListener(moduleName + eventName, listener);
	}
	/**
	 * 广播事件
	 */
	public static dispatchEvent(moduleName: string, eventName: string, data?: any): void
	{
		UIManager._eventDispatcher.dispatch(moduleName + eventName, data);
	}
	/**
	 * 清除所有事件
	 */
	public static removeAllEvent(): void
	{
		UIManager._eventDispatcher.clear();
	}
}

