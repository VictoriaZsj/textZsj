class CallDispatcher<T>
{
	private _map: Dictionary<string, Array<Function>> = new Dictionary<string, Array<Function>>();
	/**
	 * 销毁
	 */
	public dispose()
	{
		this._map = null;
	}
	public clear()
	{
		this._map.clear();
	}
	/**
	 * 已添加回调侦听的呼叫类型数量
	 */
	public get count(): number
	{
		return this._map.count;
	}
	/**
	 * 添加呼叫回调侦听(自动过滤重复的方法)
	 */
	public addListener(callId: string, listener: Function, thisObject?: any)
	{
		if(thisObject)
		{
			listener['thisObject'] = thisObject;
		}
		let list: Array<Function> = this._map.getValue(callId);
		if (list)
		{
			for (let func of list)
			{
				if (func == listener)
				{
					return;
				}
			}
			list.push(listener);
		}
		else
		{
			list = new Array<Function>();
			list.push(listener);
			this._map.add(callId, list);
		}
	}
	/**
	 * 移除呼叫回调
	 */
	public removeListener(callId: string, listener: Function)
	{
		let list: Array<Function> = this._map.getValue(callId);
		if (list)
		{
			let func: Function;
			for (let i: number = 0; i < list.length; i++)
			{
				func = list[i];
				if (func == listener)
				{
					list.splice(i, 1);
					break;
				}
			}
		}
	}
	/**
	 * 广播呼叫回调
	 */
	public dispatch(callId: string, data?: T)
	{
		let list: Array<Function> = this._map.getValue(callId);
		if (list)
		{
			let count = list.length;
			let func: Function;
			for (let i: number = 0; i < list.length; i++)
			{
				func = list[i];
				if (func['thisObject'])
				{
					if(data == undefined)
					{
						func.call(func['thisObject']);
					}
					else
					{
						func.call(func['thisObject'], data);
					}
				}
				else
				{
					if(data == undefined)
					{
						func();
					}
					else
					{
						func(data);
					}
				}
				if (list.length < count)
				{
					i -= (count - list.length);
				}
			}
		}
	}
}