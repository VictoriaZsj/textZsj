/**
 * web版
 */
class Channel_web extends ChannelBase
{
	public Initialize()
	{
		let data: any = {};
		data['channelType'] = ChannelType.qin;
		data['appName'] = window.document.title;
		data['deviceId'] = '';
		data['bundleId'] = '';
		data['hasWeixin'] = '0';
		data['hasMicrophone'] = '0';
		ChannelManager.sdkInitComplete(JSON.stringify(data));
	}
	public Login(loginType: string, isAutoLogin: boolean)
	{
		if (loginType == ChannelLoginType.Account || ChannelManager.loginType == ChannelLoginType.IntranetAccount)
		{
			let account: string = PrefsManager.getValue(PrefsManager.Login_Account);
			let password: string = PrefsManager.getValue(PrefsManager.Login_Password);
			if (isAutoLogin && account && password)
			{
				ChannelManager.DispatchAccountLoginSucceed(account, password);
			}
			else
			{
				if (!UIManager.isShowPanel(UIModuleName.LoginLocalPanel))
				{
					UIManager.showPanel(UIModuleName.LoginLocalPanel);
				}
			}
		}
		else if (loginType == ChannelLoginType.Normal)
		{
			// if (UIManager.IsShowModule(UIModuleName.TokenPanel) == false)
			// {
			// 	UIManager.ShowModuleToRoot(UIModuleName.TokenPanel);
			// }
		}
		else
		{
			UIManager.showFloatTips("登录类型错误");
			ChannelManager.sdkLoginFailed();
		}
	}
	public Logout()
	{
		ChannelManager.sdkLogout();
	}
	public PaySend(serverId: number, orderId: string, rewardNum: number, shopName: string)
	{
		if (ChannelManager.loginType == ChannelLoginType.Account || ChannelManager.loginType == ChannelLoginType.IntranetAccount)
		{	
			ShoppingManager.buyOverAction.removeListener(this.OnExchanged);		
			ShoppingManager.buyOverAction.addListener(this.OnExchanged, this);

			let shoppingType:number=ShoppingDefined.GetInstance().getPayDefinition(parseInt(shopName)).type;			
			ShoppingManager.reqBuyGdOrDmd(parseInt(shopName),rewardNum,shoppingType);		
		}
		else
		{
			UIManager.showFloatTips("不能支付");
		}
	}
	private OnExchanged(obj: any)
	{
		PayManager.buyOverAction.removeListener(this.OnExchanged);
		ChannelManager.sdkPaySucceed(StringConstant.empty);
		console.log("执行OnExchanged")
	}
	public hotUpdate(): void
	{
		ChannelManager.sdkHotUpdateComplete();
	}
}
