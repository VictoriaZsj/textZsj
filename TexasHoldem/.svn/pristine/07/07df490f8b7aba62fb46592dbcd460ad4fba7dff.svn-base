/*数组工具*/
class ArrayUtil
{
	public static RemoveItem<T>(item: T, list: Array<T>, cnt: number = 1): boolean
	{
		let isRemoveSuc: boolean;
		if (list)
		{
			if (cnt > 0)
			{
				let removeCnt:number = 0;
				for (let i: number = 0; i < cnt; i++)
				{
					let index: number = list.indexOf(item);
					if (index >= 0)
					{
						list.splice(index, 1);
						removeCnt++;
					}
				}
				if(removeCnt == cnt) //移除的数量相等，才算移除成功
				{
					isRemoveSuc = true;
				}
			}
			else if (cnt == -1)
			{
				for (let i: number = list.length - 1; i >= 0; i--)
				{
					if (list[i] == item)
					{
						list.splice(i, 1);
						isRemoveSuc = true;
					}
				}
			}
		}
		return isRemoveSuc;
	}
	public static Clear(list: Array<any>)
	{
		if (list)
		{
			list.length = 0;
		}
	}
	/**
	 * 根据某一个值，获取这个值的索引相等的对象的索引
	 */
	public static getIndex(value: any, list: Array<any>, field: string)
	{
		if (list && field)
		{
			for (let i: number = 0; i < list.length; i++)
			{
				if (list[i][field] == value)
				{
					return i;
				}
			}
		}
		return -1;
	}
	/// <summary>
	/// 打乱顺序
	/// </summary>
	/// <param name="array"></param>
	/// <param name="startIndex"></param>
	/// <param name="length"></param>
	public static moveSomeElementsToTheEnd(array: Array<any>, startIndex: number, len: number)
	{
		if (startIndex < 0 || startIndex >= array.length - 1)
		{
			//throw new Exception("startIndex must be greater than 0 and less than " + (array.length - 1).ToString());
		}

		if (startIndex + len + 1 > array.length)
		{
			//throw new Exception("Please provide a valid length");
		}

		let temp: Array<any> = new Array<any>(len);
		for (let i: number = 0; i < temp.length; i++)
		{
			temp[i] = array[startIndex + i];
		}

		//Move forward the other element
		for (let i: number = startIndex; i < array.length - len; i++)
		{
			array[i] = array[i + len];
		}

		//Move the first part back to the end of array
		let k: number = 0;
		for (let i: number = array.length - len; i < array.length; i++)
		{
			array[i] = temp[k];
			k++;
		}
	}
}

