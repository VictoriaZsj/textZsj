/**
 * 初始化模块服务器消息逻辑（主要与服务器通信）
 */
class InitServerHandler
{
	private _isComplete: boolean = false;
	public get isComplete(): boolean
	{

		return this._isComplete;
	}

	//------------------------------------------------------------------
	// 有顺序的，必须加载才能进游戏的
	//------------------------------------------------------------------

	private _isGeting: boolean = false;
	private _complete: Function;
	private _error: Function;


	/// <summary>
	/// 进游戏前初始化调用
	/// </summary>
	/// <param name="loginInfo"></param>
	/// <param name="serverInfo"></param>
	/// <param name="complete"></param>
	/// <param name="error"></param>
	public Invoke(loginInfo: LoginInfo, serverInfo: ServerInfo, complete: Function, error: Function)
	{
		this._isComplete = false;
		this._complete = complete;
		this._error = error;
		UserManager.serverInfo = serverInfo;

		SocketManager.Close();
		SocketManager.Initialize(loginInfo.userid, serverInfo.roleId, serverInfo.id, loginInfo.secret, loginInfo.session, GameSetting.Gamec2sBin, GameSetting.Games2cBin);
		this.RemoveEvents();
		SocketManager.OnConnect.addListener(this.OnSocketConnect, this);
		SocketManager.OnEnterError.addListener(this.OnEnterError, this);
		SocketManager.isEntering = true;
		SocketManager.Connect(loginInfo.ip, loginInfo.port, true); //loginInfo.gameDomin
	}
	/// <summary>
	/// 当发送给服务器成功，在服务器返回之前断线，然后重连请求一样的session时候，重新拉数据
	/// </summary>
	public AfreshGetInfo()
	{
		if (this._isGeting == false)
		{
			this._isGeting = true;
			SocketManager.AddCommandListener(Command.Role_GetInfo_3000, this.OnRoleInfo, this);
			SocketManager.Send(Command.Role_GetInfo_3000);
		}
	}
	private RemoveEvents()
	{
		SocketManager.OnConnect.removeListener(this.OnSocketConnect, this);
		SocketManager.OnEnterError.removeListener(this.OnEnterError, this);
	}
	private OnSocketConnect()
	{
		SocketManager.AddCommandListener(Command.Role_GetInfo_3000, this.OnRoleInfo, this);
		SocketManager.Send(Command.Role_GetInfo_3000);
	}
	private OnEnterError()
	{
		this.DispatchError();
	}
	private OnRoleInfo(result: SpRpcResult)
	{
		if (LoginManager.loginInfo.hasAlreadyCreateRole == false)
		{
			LoginManager.loginInfo.hasAlreadyCreateRole = true;
		}
		SocketManager.RemoveCommandListener(Command.Role_GetInfo_3000, this.OnRoleInfo, this);
		if (UserManager.serverInfo.roleId == 0)
		{
			//创建角色后，从socket里获取角色id
			UserManager.serverInfo.roleId = SocketManager.roleId;
			//创建角色统计
			// ChannelManager.SetCreateRole(SocketManager.roleId, _serverInfo.id, _serverInfo.definition.name);
		}
		//
		// LoggerManager.emailLogger.SetRoleId(SocketManager.roleId, _serverInfo.id);
		// TimeManager.Initialize(table);
		UserManager.initialize(SocketManager.roleId, result.data);//一定要用socket返回的roleId
		TimeManager.initialize(result.data);
		this.reqAwardInfo();
		// UserManager.initialize(SocketManager.roleId, _serverInfo.definition, table);//一定要用socket返回的roleId
		// this.DispatchComplete();
	}
	/**
	 * 拉取兑换信息
	 */
	private reqAwardInfo()
	{
		SocketManager.AddCommandListener(Command.Award_GetInfo_3112, this.onReqAwardInfo, this);
		SocketManager.Send(Command.Award_GetInfo_3112);
	}

	private onReqAwardInfo(result: SpRpcResult)
	{
		AwardManager.Initialize(result);
		this.reqItemList();
	}
	/**
	 * 拉取物品列表
	 */
	private reqItemList()
	{
		SocketManager.Send(Command.Req_ItemList_3020, null, this.onGetItemList, null, this);
	}
	private onGetItemList(result: SpRpcResult)
	{
		ItemManager.initialize(result);
		this.reqFriendListInfo();
	}

	/**
	* 发送好友列表信息获取请求
	*/
	private reqFriendListInfo()
	{
		SocketManager.AddCommandListener(Command.Friend_GetList_3156, this.FriendListInfoResponse, this);
		SocketManager.Send(Command.Friend_GetList_3156);
	}
	private FriendListInfoResponse(result: SpRpcResult)
	{
		SocketManager.RemoveCommandListener(Command.Friend_GetList_3156, this.FriendListInfoResponse, this);
		FriendManager.Initialize(result);
		//拉取房间信息需要最后拉取
		this.reqAchievementList();
	}
	/**
	 * 拉取成就
	 */
	private reqAchievementList()
	{
		SocketManager.AddCommandListener(Command.Achievement_GetList_3090, this.OnAchievementListInfo, this);
		SocketManager.Send(Command.Achievement_GetList_3090, { "roleId": UserManager.userInfo.roleId });
	}

	private OnAchievementListInfo(result: SpRpcResult)
	{
		SocketManager.RemoveCommandListener(Command.Achievement_GetList_3090, this.OnAchievementListInfo, this);
		AchievementManager.initialize(result);
		AchieveProcessManager.Initialize(result);

		GamblingManager.OnGetRoomInfoEvent.addListener(this.requestNotice, this); //拉取房间信息 需要最后拉取
		GamblingManager.reqEnterRoom();
		// this.reqGetActivityList();
		this.requestNotice();
	}

	/**
	 * 拉取活动列表
	 */
	private reqGetActivityList()
	{
		SocketManager.Send(Command.Activity_GetList_3233, null, this.onGetreqGetActivityList, null, this);	
	}

	private onGetreqGetActivityList(result:SpRpcResult)
	{
		ActivityManager.Initialize(result);
		this.reqJoinNumList();
	}
	/**
	 * 拉取锦标赛赛事报名人数信息列表
	*/
	private reqJoinNumList()
	{
		//todo 协议待添加
		SocketManager.Send(Command.Friend_GetList_3156, this.MTTJoinNumListResponse);
	}
	private MTTJoinNumListResponse(result: SpRpcResult)
	{
		if (result.data)
		{
			if (!ChampionshipManager.joinNumList)
			{
				ChampionshipManager.joinNumList = new Array<MTTJoinNumInfo>();
			}
			ChampionshipManager.joinNumList = result.data['joinNumList'];
		}
		this.reqChampionshipJoinedList();
	}
	/**
	 * 拉取锦标赛已报名赛事列表
	*/
	private reqChampionshipJoinedList()
	{
		//todo 协议待添加
		SocketManager.Send(Command.Friend_GetList_3156, this.championshipJoinedListResponse);
	}
	private championshipJoinedListResponse(result: SpRpcResult)
	{
		ChampionshipManager.initialize(result);
		this.reqGetRoomInfo();		
	}
	private reqGetRoomInfo()
	{
		GamblingManager.OnGetRoomInfoEvent.addListener(this.onGetRoomInfoResult, this);
		//GamblingManager.reqGetRoomInfo();
	}
	private onGetRoomInfoResult()
	{
		//请求服务器通知，需要所有拉取协议完毕了之后，请求服务器推送
		this.requestNotice();
	}
	/// <summary>
	/// 请求服务器推送 在所有拉取协议之后调用
	/// </summary>
	private requestNotice()
	{
		GamblingManager.OnGetRoomInfoEvent.removeListener(this.requestNotice, this); //拉取房间信息 需要最后拉取
		//发送3004开启推送通知
		SocketManager.Send(Command.System_GetNotice_3004, { sessionId: SocketManager.requestSessionMax }, this.onGetNotice, null, this);
	}
	private onGetNotice()
	{
		SocketManager.isEntering = false;//进游戏结束,开启重连，提示正常处理
		this.DispatchComplete();
	}

	private DispatchComplete()
	{
		this.RemoveEvents();
		this._isGeting = false;
		this._isComplete = true;
		if (this._complete != null) 
		{
			this._complete();
			this._complete = null;
		}
	}
	private DispatchError()
	{
		this.RemoveEvents();
		this._isGeting = false;
		if (this._error != null)
		{
			this._error();
			this._error = null;
		}
	}
}
