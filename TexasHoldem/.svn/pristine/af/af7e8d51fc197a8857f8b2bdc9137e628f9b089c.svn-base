/**
 * 牌的排序
 */
class SortUtil
{
	public static sortCardByLayer(card1: ShouPaiDefinition, card2: ShouPaiDefinition): number
	{
		if (card1.layer > card2.layer)
		{
			return 1;
		}
		if (card1.layer < card2.layer)
		{
			return -1;
		}
		return 0;
	}
	public static sortCardById(card1: IBaseDefintion, card2: IBaseDefintion): number
	{
		if (card1.id > card2.id)
		{
			return 1;
		}
		if (card1.id < card2.id)
		{
			return -1;
		}
		return 0;
	}
	public static sortY(a: egret.DisplayObjectContainer, b: egret.DisplayObjectContainer): number
	{
		if (a.y > b.y)
		{
			return 1;
		}
		if (a.y < b.y)
		{
			return -1;
		}
		return 0;
	}
	public static downSort(a: number, b: number)
	{
		if (a > b)
		{
			return -1;
		}
		if (a < b)
		{
			return 1;
		}
		return 0;
	}
	public static sortGroupCard(a: GroupCardInfo, b: GroupCardInfo): number
	{
		if (a.index > b.index)
		{
			return 1;
		}
		if (a.index < b.index)
		{
			return -1;
		}
		return 0;
	}
	/**
	 * 按照盲注升序排序(买入适用)
	*/
	public static blindUpSort(a: PlayingFieldRoomInfo, b: PlayingFieldRoomInfo)
	{
		if (a.smallBlind > b.smallBlind)
		{
			return 1;
		}
		if (a.smallBlind < b.smallBlind)
		{
			return -1;
		}
		if (a.smallBlind == b.smallBlind)
		{
			if (a.player > b.player)
			{
				return 1;
			}
			if (a.player < b.player)
			{
				return -1;
			}
			if (a.player == b.player)
			{
				if (a.id > b.id)
				{
					return 1;
				}
				if (a.id < b.id)
				{
					return -1;
				}
				return 0;
			}
		}
	}
	/**
	 * 按照盲注降序排序(买入适用)
	*/
	public static blindDownSort(a: PlayingFieldRoomInfo, b: PlayingFieldRoomInfo)
	{
		if (a.smallBlind > b.smallBlind)
		{
			return -1;
		}
		if (a.smallBlind < b.smallBlind)
		{
			return 1;
		}
		if (a.smallBlind == b.smallBlind)
		{
			if (a.player > b.player)
			{
				return -1;
			}
			if (a.player < b.player)
			{
				return 1;
			}
			if (a.player == b.player)
			{
				if (a.id > b.id)
				{
					return -1;
				}
				if (a.id < b.id)
				{
					return 1;
				}
				return 0;
			}
		}
	}
	/**
	 * 按照房间id升序排序
	*/
	public static roomIdUpSort(a: PlayingFieldRoomInfo, b: PlayingFieldRoomInfo)
	{
		if (a.id > b.id)
		{
			return 1;
		}
		if (a.id < b.id)
		{
			return -1;
		}
		return 0;
	}
	/**
	 * 按照房间id降序排序
	*/
	public static roomIdDownSort(a: PlayingFieldRoomInfo, b: PlayingFieldRoomInfo)
	{
		if (a.id > b.id)
		{
			return -1;
		}
		if (a.id < b.id)
		{
			return 1;
		}
		return 0;
	}
	/**
	 * 按照在玩人数升序排序
	*/
	public static roomPlayNumUpSort(a: PlayingFieldRoomInfo, b: PlayingFieldRoomInfo)
	{
		if (a.player > b.player)
		{
			return 1;
		}
		if (a.player < b.player)
		{
			return -1;
		}
		if (a.player == b.player)
		{
			if (a.id > b.id)
			{
				return 1;
			}
			if (a.id < b.id)
			{
				return -1;
			}
			return 0;
		}
	}
	/**
	 * 按照在玩人数降序排序
	*/
	public static roomPlayNumDownSort(a: PlayingFieldRoomInfo, b: PlayingFieldRoomInfo)
	{
		if (a.player > b.player)
		{
			return -1;
		}
		if (a.player < b.player)
		{
			return 1;
		}
		if (a.player == b.player)
		{
			if (a.id > b.id)
			{
				return -1;
			}
			if (a.id < b.id)
			{
				return 1;
			}
			return 0;
		}
		return 0;
	}
}