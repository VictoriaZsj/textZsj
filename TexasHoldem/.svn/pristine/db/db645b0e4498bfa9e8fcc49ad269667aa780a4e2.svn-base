/**
 * 通信基础socket
 */
class BaseSocket
{
	public static readonly HandshakeName: string = "handshake";
	//send	
	private _session: number = 0; //消息id，自增
	protected _discRetryMap: Dictionary<string, SocketSendInfo> = new Dictionary<string, SocketSendInfo>();//断线重发图表
	//
	private _socket: egret.WebSocket;
	private _address: string = StringConstant.empty; 	//地址
	private _port: number;
	protected _msgType: string = egret.WebSocket.TYPE_BINARY;
	//event callback
	private _commandDispatcher: CallDispatcher<SpRpcResult> = new CallDispatcher<SpRpcResult>();
	private _errorDispatcher: CallDispatcher<SpRpcResult> = new CallDispatcher<SpRpcResult>();
	//
	private _normalErrorSet: Array<number> = new Array<number>(); 	//有错误码的包也正常解析
	//
	private _enabledSend: boolean = false;
	//
	protected _spRpc: Sproto.CreateNewRet;
	protected _attchRet: Sproto.CreateNewRet.AttachRet;
	private _useHandshake: boolean = false;//是否使用握手
	protected _isHandshaking: boolean = false;//是否正在处理握手中


	constructor(useHandshake: boolean = false)
	{
		this._useHandshake = useHandshake;
	}

	public get enabledSend(): boolean
	{
		return this._enabledSend;
	}

	private _requestSessionMax: number = 0;
	//记录服务器主动通知协议的session的最大值
	public get requestSessionMax(): number
	{
		return this._requestSessionMax;
	}
	/// <summary>
	/// 添加正常解析的错误码包（命令事件正常执行，而不是执行错误事件）
	/// </summary>
	/// <param name="error"></param>
	public addNormalError(error: number)
	{
		this._normalErrorSet.push(error);
	}
	/// <summary>
	/// 移除正常解析的错误码包
	/// </summary>
	/// <param name="error"></param>
	public removeNormalError(error: number)
	{
		ArrayUtil.RemoveItem(error, this._normalErrorSet);
	}
	public get address(): string
	{
		return this._address;
	}
	public get port(): number
	{
		return this._port;
	}
	public dispose()
	{
		this.RemoveCommandListener(BaseSocket.HandshakeName, this.ParseHandshake);
		this._discRetryMap = null;
		this._enabledSend = false;
		this.resetSocket();
		if (this._commandDispatcher != null)
		{
			this._commandDispatcher.dispose();
			this._commandDispatcher = null;
		}
		if (this._errorDispatcher != null)
		{
			this._errorDispatcher.dispose();
			this._errorDispatcher = null;
		}
		this._spRpc = null;
	}
	/// <summary>
	/// 关闭连接
	/// </summary>
	/// <param name="enabledSend">socket关闭后，是否允许执行发送方法</param>
	public close(enabledSend: boolean = false)
	{
		this._enabledSend = enabledSend;
		this.resetSocket();
	}
	/// <summary>
	/// 是否有断线重连后需要重发的数据
	/// </summary>
	public get hasDiscRetry(): boolean
	{
		if (this._discRetryMap != null)
		{
			return this._discRetryMap.count > 0;
		}
		return false;
	}
	/**
	 * 重启socket
	 */
	private resetSocket()
	{
		if (this._socket != null)
		{
			try
			{
				this._socket.removeEventListener(egret.ProgressEvent.SOCKET_DATA, this.onReceiveMessage, this);
				this._socket.removeEventListener(egret.Event.CONNECT, this.onSocketOpen, this); //添加链接打开侦听，连接成功会调用此方法
				this._socket.removeEventListener(egret.Event.CLOSE, this.onSocketClose, this); 	//添加链接关闭侦听，手动关闭或者服务器关闭连接会调用此方法
				this._socket.removeEventListener(egret.IOErrorEvent.IO_ERROR, this.onSocketError, this); 	//添加异常侦听，出现异常会调用此方法
				this._socket.close();
				this._socket = null;
			}
			catch (Exception)
			{
				console.log(Exception);
			}
		}
		this._isHandshaking = false;
	}
	//------------------------------------------------------------------
	// 
	//------------------------------------------------------------------
	/// <summary>
	/// 连接服务器
	/// </summary>
	/// <param name="ip"></param>
	/// <param name="port"></param>
	/// <param name="address"></param>
	public Connect(address: string, port: number)
	{
		this._address = address;
		this._port = port;
		if (this._socket != null)
		{
			this.resetSocket();
		}
		this._socket = new egret.WebSocket();
		//设置数据格式为二进制，默认为字符串
		this._socket.type = this._msgType;
		//添加收到数据侦听，收到数据会调用此方法
		this._socket.addEventListener(egret.ProgressEvent.SOCKET_DATA, this.onReceiveMessage, this);
		//添加链接打开侦听，连接成功会调用此方法
		this._socket.addEventListener(egret.Event.CONNECT, this.onSocketOpen, this);
		//添加链接关闭侦听，手动关闭或者服务器关闭连接会调用此方法
		this._socket.addEventListener(egret.Event.CLOSE, this.onSocketClose, this);
		//添加异常侦听，出现异常会调用此方法
		this._socket.addEventListener(egret.IOErrorEvent.IO_ERROR, this.onSocketError, this);
		//连接服务器
		this._socket.connect(this._address, this._port);
	}
	private onSocketOpen(): void
	{
		if (this._socket == null)
		{
			return;
		}
		if (this._spRpc)
		{
			this._enabledSend = true;
			this._spRpc.host("package");
			this._attchRet = this._spRpc.attach();
			if (this._useHandshake)
			{
				this._isHandshaking = true;
				this.Handshake();
			}
			else
			{
				this._isHandshaking = false;
				this.DispatchMessage(new SocketMessage(SocketMessageType.Connect, "0", "connect succeed"));
			}
		}
	}
	/// <summary>
	/// 调用发送，如果没有连接继续执行发送，抛出异常,兼容重连
	/// </summary>
	/// <param name="isDiscRetry"></param>
	/// <param name="cmdId"></param>
	/// <param name="args"></param>
	public InvokeSend(isDiscRetry: boolean, cmdId: string, args: any = null): number
	{
		if (this._enabledSend || isDiscRetry)
		{
			this._session++;
		}
		if (isDiscRetry)
		{
			this.addSendObject(cmdId, this._session, args);
		}
		if (this._enabledSend)
		{
			return this.sendData(cmdId, this._session, args);
		}
		return -1;
	}
	/**
	 * 同步发送，如果没有连接继续执行发送，抛出异常
	 */
	public Send(cmdId: string, args: any = null): number
	{
		this._session++;
		return this.sendData(cmdId, this._session, args);
	}
	protected sendData(cmdId: string, session: number, data: any = null): number
	{
		if (this._socket == null || this._spRpc == null || this._attchRet == null)
		{
			this.DispatchMessage(new SocketMessage(SocketMessageType.NetworkError, "-1", "NotInitialized"));
			return;
		}
		try
		{
			console.log("Socket.Send -> cmdId:", cmdId, "session:", session);
			let arr = this._attchRet(cmdId, data, session).buf;
			let buff: ArrayBuffer = array2arraybuffer(arr);
			let byteArr: egret.ByteArray = new egret.ByteArray(buff);
			this._socket.writeBytes(byteArr);
			this._socket.flush();
			return session;
		}
		catch (e)
		{
			console.log(e);
			this.ParseException(-1, e);
		}
		return -1;
	}
	private onSocketClose(): void
	{
		console.log("WebSocket Close");
		this.DispatchMessage(new SocketMessage(SocketMessageType.Failing, "close", "Server Close"));
	}

	private onSocketError(): void
	{
		console.log("WebSocket connect error");
		this.DispatchMessage(new SocketMessage(SocketMessageType.NetworkError, "close", "WebSocket connect error"));
	}
	private onReceiveMessage(e: egret.Event): void
	{
		if (!this._socket)
		{
			return;
		}
		let btyearray: egret.ByteArray = new egret.ByteArray();
		this._socket.readBytes(btyearray);
		btyearray.position = 0;
		let arr = arraybuffer2array(btyearray.buffer);
		this._spRpc.dispatch({ buf: arr, sz: arr.length }, this.handleRequest.bind(this), this.handleResponse.bind(this));
	}
	private handleRequest(name: string, data: any, session: number, error: number)
	{
		if (error == undefined)
		{
			error = 0;
		}
		console.log("server-push---->socket.receive -> cmdId:", name, "-> session:", session, "-> error:", error);
		this._discRetryMap.remove(name);
		let spRpcResult: SpRpcResult = new SpRpcResult();
		spRpcResult.cmdId = name;
		spRpcResult.data = data;
		spRpcResult.error = error;
		spRpcResult.op = SpRpcOp.Request;
		spRpcResult.session = session;
		if (this._requestSessionMax < session)
		{
			this._requestSessionMax = session;
		}
		if (this._useHandshake && this._isHandshaking) 
		{
			this.ParseHandshake(spRpcResult);
		}
		else
		{
			this.DispatchResult(spRpcResult);
			if (spRpcResult.error == 0 || this._normalErrorSet.indexOf(spRpcResult.error) != -1)
			{
				this.DispatchCommand(name, spRpcResult);
			}
			else
			{
				this.DispatchError(name, spRpcResult);
			}
		}
	}
	private handleResponse(name: string, data: any, session: number, error: number)
	{
		if (error == undefined)
		{
			error = 0;
		}
		console.log("client-req-----socket.receive -> cmdId:", name, "-> session:", session, "-> error:", error);
		this._discRetryMap.remove(name);
		let spRpcResult: SpRpcResult = new SpRpcResult();
		spRpcResult.cmdId = name;
		spRpcResult.data = data;
		spRpcResult.error = error;
		spRpcResult.op = SpRpcOp.Response;
		spRpcResult.session = session;
		if (this._useHandshake && this._isHandshaking) 
		{
			this.ParseHandshake(spRpcResult);
		}
		else
		{
			this.DispatchResult(spRpcResult);
			if (spRpcResult.error == 0 || this._normalErrorSet.indexOf(spRpcResult.error) != -1)
			{
				this.DispatchCommand(name, spRpcResult);
			}
			else
			{
				this.DispatchError(name, spRpcResult);
			}
		}
	}
	private addSendObject(cmdId: string, session: number, obj: ArrayBuffer)
	{
		let info: SocketSendInfo = new SocketSendInfo();
		info.session = session;
		info.obj = obj;
		this._discRetryMap.add(cmdId, info);
	}
	protected Handshake()
	{
	}
	protected ParseHandshake(result: SpRpcResult)
	{

	}
	//------------------------------------------------------------------
	// Message
	//------------------------------------------------------------------

	private _onSocketMessage: ActionDispatcher;
	public AddMessageListener(listener: Function)
	{
		if (this._onSocketMessage == null)
		{
			this._onSocketMessage = new ActionDispatcher();
		}
		this._onSocketMessage.addListener(listener);
	}
	public RemoveMessageListener(listener: Function)
	{
		if(this._onSocketMessage)
		{
			this._onSocketMessage.removeListener(listener);
		}
	}
	protected DispatchMessage(msg: SocketMessage)
	{
		if (this._onSocketMessage)
		{
			this._onSocketMessage.dispatch(msg);
		}
	}
	private ParseException(errorCode: number, e: any)
	{
		let msg: SocketMessage = new SocketMessage(SocketMessageType.NetworkError, errorCode.toString(), e.toString());
		this.DispatchMessage(msg);
	}

	//------------------------------------------------------------------
	// Result
	//------------------------------------------------------------------

	private _onResult: ActionDispatcher;
	/**
	 * 广播服务器返回结果，全局的。只有客户端主动请求才会广播事件
	 */
	public AddResultListener(listener: Function)
	{
		if (this._onResult == null)
		{
			this._onResult = new ActionDispatcher();
		}
		this._onResult.addListener(listener);
	}
	public RemoveResultListener(listener: Function)
	{
		if(this._onResult)
		{
			this._onResult.removeListener(listener);
		}
	}
	private DispatchResult(result: SpRpcResult)
	{
		if (this._onResult)
		{
			this._onResult.dispatch(result);
		}
	}

	//------------------------------------------------------------------
	// Command
	//------------------------------------------------------------------

	/// <summary>
	/// 添加命令回调
	/// </summary>
	/// <param name="cmdId"></param>
	/// <param name="listener"></param>
	public AddCommandListener(cmdId: string, listener: Function, thisObject?: any)
	{
		this._commandDispatcher.addListener(cmdId, listener, thisObject);
	}
	/// <summary>
	/// 移除命令回调
	/// </summary>
	/// <param name="cmdId"></param>
	/// <param name="listener"></param>
	public RemoveCommandListener(cmdId: string, listener: Function)
	{
		this._commandDispatcher.removeListener(cmdId, listener);
	}
	/// <summary>
	/// 广播命令回调
	/// </summary>
	/// <param name="cmdId"></param>
	/// <param name="result"></param>
	private DispatchCommand(cmdId: string, result: SpRpcResult)
	{
		this._commandDispatcher.dispatch(cmdId, result);
	}
	/// <summary>
	/// 添加错误回调
	/// </summary>
	/// <param name="cmdId"></param>
	/// <param name="listener"></param>
	public AddErrorListener(cmdId: string, listener: Function, thisObject?: any)
	{
		this._errorDispatcher.addListener(cmdId, listener, thisObject);
	}
	/// <summary>
	/// 移除错误回调
	/// </summary>
	/// <param name="cmdId"></param>
	/// <param name="listener"></param>
	public RemoveErrorListener(cmdId: string, listener: Function)
	{
		this._errorDispatcher.removeListener(cmdId, listener);
	}
	/// <summary>
	/// 广播错误回调
	/// </summary>
	/// <param name="cmdId"></param>
	/// <param name="result"></param>
	private DispatchError(cmdId: string, result: SpRpcResult)
	{
		this._errorDispatcher.dispatch(cmdId, result);
	}
}